<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员的自我救赎</title>
    <link>http://example.org/</link>
    <description>Recent content on 程序员的自我救赎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/posts/first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/first/</guid>
      <description>Kubernetes新手村历练篇——kubeadm搭建k8s 引言 作为近三十年最牛逼的开源项目，k8s的搭建自然是劝退很多人的拦路虎，以我浅短的认知，目前主流的安装方式一共有三种
 使用rancher 等可视化工具无脑安装 k8s社区大佬写的kubeadm部署工具（冷知识：大佬写kubeadm的时候在上高中） 最困难的二进制部署方式  作为高逼格的正经人，自然不能选用可视化界面点点点，暂且先采用第二种kubeadm部署。
前 万事开头难，这句话不假，可是有很多人连开头都没开，准备工作也是很重要的。
首先我一般学习是采用购买云厂商的服务器，双十一快到了，赶紧准备屯几台服务器吧。我的大概配置是这样的
 三台centos7.x操作系统、配置2核4G、能够内网互通的服务器（这个配置应该是最低配了，谁说学编程省钱的） 安装docker（配一下阿里云的镜像加速的服务，你懂的） 防火墙和SElinux还有swap关闭（更方便学习）  中 其实在国外安装k8s很简单，就几条命令的事，难就难在国内一些不可描述的原因。
一、安装kubeadm、kubelet、kubectl（注意要让版本相差不多）  kubeadm:用来初始化集群 kubelet:在集群中的每个节点上用来启动pod和容器等 kubectl: 用来与集群通讯的工具  核心命令：yum -y install kubelet-1.18.6 kubeadm-1.18.6 kubectl-1.18.6 (先暂且用这个老一点的后面再升，搞不下来的可以参考阿里云开发者社区里的镜像站)
再执行systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet
二、kebeadm执行init 选一个自己喜欢的机器执行sudo kubeadm init --kubernetes-version=v1.18.6 --image-repository registry.aliyuncs.com/google_containers （真的很烦，明明只需要一个kubeadm init）好了，再等待的时候我们来看一下这个简单的init命令都干了什么事
 当你执行完kubeadm init指令之后，kubeadm 首先要做的，是一系列的检查工作，以确定这台机器可以用来部署 Kubernetes。这一步检查，我们称为“Preflight Checks”，它可以为你省掉很多后续的麻烦。
  Linux 内核的版本必须是否是 3.10 以上？ Linux Cgroups 模块是否可用？机器的 hostname 是否标准？ 在 Kubernetes 项目里，机器的名字以及一切存储在 Etcd 中的 API 对象，都必须使用标准的 DNS 命名（RFC 1123）。 用户安装的 kubeadm 和 kubelet 的版本是否匹配？机器上是不是已经安装了 Kubernetes 的二进制文件？ Kubernetes 的工作端口 10250/10251/10252 端口是不是已经被占用？ ip、mount 等 Linux 指令是否存在？ Docker 是否已经安装？ ……  在通过了 Preflight Checks 之后，kubeadm 要为你做的，是生成 Kubernetes 对外提供服务所需的各种证书和对应的目录。</description>
    </item>
    
  </channel>
</rss>
